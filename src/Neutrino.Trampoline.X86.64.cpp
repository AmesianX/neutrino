#include "Neutrino.Trampoline.X86.64.h"

#include <cstring>

namespace Neutrino {
	DWORD TrampolineX8664::GetCodeMemSize() {
		return 2 * sizeof(UINTPTR);
	}

	DWORD TrampolineX8664::MakeTrampoline(BYTE *outBuffer, UINTPTR virtualStack, UINTPTR jumpBuff, UINTPTR environment, UINTPTR destination, UINTPTR mem) {

		static const BYTE code[] = {
			0x4c, 0x89, 0x3d, 0x00, 0x00, 0x00, 0x00,								// 0x00 - mov [rip + <r15Save>], r15
			0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,				// 0x07 - mov r15, <dwVirtualStack>
			0x49, 0x87, 0x27,														// 0x11 - xchg rsp, [r15]
			0x9C,																	// 0x14 - pushf
			0x50,																	// 0x15 - push rax
			0x51,																	// 0x16 - push rcx
			0x52,																	// 0x17 - push rdx
			0x53, 																	// 0x18 - push rbx
			0x55,																	// 0x19 - push rbp
			0x56, 																	// 0x1A - push rsi
			0x57, 																	// 0x1B - push rdi
			0x41, 0x50, 															// 0x1C - push r8
			0x41, 0x51,																// 0x1E - push r9
			0x41, 0x52, 															// 0x20 - push r10
			0x41, 0x53, 															// 0x22 - push r11
			0x41, 0x54, 															// 0x24 - push r12
			0x41, 0x55,																// 0x26 - push r13
			0x41, 0x56, 															// 0x28 - push r14
			0x41, 0x57, 															// 0x2A - push r15
			0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 			// 0x2C - mov rax, <Environment>
			0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 			// 0x36 - mov rax, <dwBranchHandler>
			0x48, 0x8D, 0x64, 0x24, 0xE0,											// 0x40 - lea rsp, [rsp - 0x20]
			0xff, 0x10,																// 0x45 - call [rax]
			0x48, 0x8d, 0x64, 0x24, 0x20,											// 0x47 - lea rsp, [rsp + 0x20]
			0x48, 0x89, 0x05, 0x00, 0x00, 0x00, 0x00,								// 0x4C - mov [rip + <jumpbuff>], rax
			0x41, 0x5F,																// 0x53 - pop r15
			0x41, 0x5E,																// 0x55 - pop r14
			0x41, 0x5D,																// 0x57 - pop r13
			0x41, 0x5C, 															// 0x59 - pop r12
			0x41, 0x5B,																// 0x5B - pop r11
			0x41, 0x5A, 															// 0x5D - pop r10
			0x41, 0x59, 															// 0x5F - pop r9
			0x41, 0x58, 															// 0x61 - pop r8
			0x5F,																	// 0x63 - pop rdi
			0x5E, 																	// 0x64 - pop rsi
			0x5D, 																	// 0x65 - pop rbp
			0x5B, 																	// 0x66 - pop rbx
			0x5A, 																	// 0x67 - pop rdx
			0x59, 																	// 0x68 - pop rcx
			0x58, 																	// 0x69 - pop rax
			0x9D,																	// 0x6A - popf
			0x49, 0x87, 0x27,														// 0x6B - xchg rsp, [r15]
			0x4C, 0x8B, 0x3D, 0x00, 0x00, 0x00, 0x00,								// 0x6E - mov r15, [rip + <r15Save>]
			0xFF, 0x25, 0x00, 0x00, 0x00, 0x00										// 0x75 - jmp [rip + <jumpbuff>] 
		};

		memcpy(outBuffer, code, sizeof(code));

		UINTPTR codeBase = (UINTPTR)outBuffer;
		UINTPTR r15Save = mem;
		UINTPTR jBuff = mem + sizeof(UINTPTR);

		*(DWORD *)(&(outBuffer[0x03])) = r15Save - (codeBase + 0x07); // r15Save
		*(UINTPTR *)(&(outBuffer[0x09])) = virtualStack;
		*(UINTPTR *)(&(outBuffer[0x2E])) = environment;
		*(UINTPTR *)(&(outBuffer[0x38])) = destination;
		*(DWORD *)(&(outBuffer[0x4F])) = jBuff - (codeBase + 0x53); // jumpbuff
		*(DWORD *)(&(outBuffer[0x71])) = r15Save - (codeBase + 0x75); // r15Save
		*(DWORD *)(&(outBuffer[0x77])) = jBuff - (codeBase + 0x7B); // jumpbuff
		
		return sizeof(code);
	}
};

